
R version 3.1.1 (2014-07-10) -- "Sock it to Me"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "meshr"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('meshr')
Loading required package: fdrtool
Loading required package: Category
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from ‘package:stats’:

    xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, as.vector, cbind, colnames, do.call, duplicated,
    eval, evalq, get, intersect, is.unsorted, lapply, mapply, match,
    mget, order, paste, pmax, pmax.int, pmin, pmin.int, rank, rbind,
    rep.int, rownames, sapply, setdiff, sort, table, tapply, union,
    unique, unlist

Loading required package: AnnotationDbi
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: GenomeInfoDb
Loading required package: Matrix
Loading required package: GO.db
Warning: package ‘RSQLite’ was built under R version 3.1.2
Loading required package: DBI

Loading required package: cummeRbund
Loading required package: ggplot2
Loading required package: reshape2
Loading required package: fastcluster

Attaching package: ‘fastcluster’

The following object is masked from ‘package:stats’:

    hclust

Loading required package: rtracklayer
Loading required package: GenomicRanges
Loading required package: IRanges

Attaching package: ‘IRanges’

The following object is masked from ‘package:Matrix’:

    expand

Loading required package: Gviz
Loading required package: grid

Attaching package: ‘cummeRbund’

The following object is masked from ‘package:GenomicRanges’:

    promoters

The following object is masked from ‘package:IRanges’:

    promoters

The following objects are masked from ‘package:Biobase’:

    featureNames, samples

Loading required package: org.Hs.eg.db

Loading required package: MeSH.db
Loading required package: MeSHDbi

Attaching package: ‘MeSHDbi’

The following object is masked from ‘package:utils’:

    packageName

Loading required package: MeSH.AOR.db
Loading required package: MeSH.PCR.db
Loading required package: org.MeSH.Hsa.db
Loading required package: org.MeSH.Aca.db
Loading required package: org.MeSH.Atu.K84.db
Loading required package: org.MeSH.Bsu.168.db
Loading required package: org.MeSH.Syn.db
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("PMCID")
> ### * PMCID
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PMCID
> ### Title: PUBMEDID - PMCID correspondence
> ### Aliases: PMCID
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(PMCID)
> names(PMCID)
[1] "PUBMEDID" "PMCID"   
> 
> 
> 
> cleanEx()
> nameEx("geneid.cummeRbund")
> ### * geneid.cummeRbund
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geneid.cummeRbund
> ### Title: Test data of significant differentially expressed genes used in
> ###   cummeRbund package.
> ### Aliases: geneid.cummeRbund
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(geneid.cummeRbund)
> names(geneid.cummeRbund)
[1] "SYMBOL"   "ENTREZID"
> 
> ## This data is also available by following scripts.
> if(interactive()){
+ library(cummeRbund)
+ library(org.Hs.eg.db)
+ cuff <- readCufflinks(dir = system.file("extdata", package = "cummeRbund"))
+ 
+ gene.symbols <- annotation(genes(cuff))[,4]
+ mySigGeneIds <- getSig(cuff,x='hESC',y='iPS',alpha=0.05,level='genes')
+ mySigGenes <- getGenes(cuff,mySigGeneIds)
+ 
+ sig.gene.symbols <- annotation(mySigGenes)[,4]
+ gene.symbols <- gene.symbols[!is.na(gene.symbols)]
+ sig.gene.symbols <- sig.gene.symbols[!is.na(sig.gene.symbols)]
+ 
+ geneid.cummeRbund <- select(org.Hs.eg.db, keys=gene.symbols, keytype="SYMBOL", columns="ENTREZID")
+ sig.geneid.cummeRbund <- select(org.Hs.eg.db, keys=sig.gene.symbols, keytype="SYMBOL", columns="ENTREZID")
+ 
+ na.index1 <- which(is.na(geneid.cummeRbund[,2]))
+ for (i in na.index1){
+ s <- unlist(strsplit(as.character(geneid.cummeRbund[i,][1]), ","))[1]
+ sym <- get(s, org.Hs.egALIAS2EG)[1]
+ geneid.cummeRbund[i,2] <- as.integer(sym)
+ }
+ 
+ na.index2 <- which(is.na(sig.geneid.cummeRbund[,2]))
+ for (i in na.index2){
+ 	s <- unlist(strsplit(as.character(sig.geneid.cummeRbund[i,][1]), ","))[1]
+ 	sym <- get(s, org.Hs.egALIAS2EG)[1]
+ 	sig.geneid.cummeRbund[i,2] <- as.integer(sym)
+ }
+ 
+ geneid.cummeRbund <- geneid.cummeRbund[!duplicated(geneid.cummeRbund[,2]), ]
+ sig.geneid.cummeRbund <- sig.geneid.cummeRbund[!duplicated(sig.geneid.cummeRbund[,2]), ]
+ }
> 
> 
> 
> cleanEx()
> nameEx("meshHyperGTest")
> ### * meshHyperGTest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: meshHyperGTest
> ### Title: Hypergeometric Tests for MeSH term association
> ### Aliases: meshHyperGTest meshHyperGTest,MeSHHyperGParams-method
> ### Keywords: models
> 
> ### ** Examples
> 
> data(geneid.cummeRbund)
> data(sig.geneid.cummeRbund)
> 
> meshParams <- new("MeSHHyperGParams", geneIds=sig.geneid.cummeRbund[,2], universeGeneIds=geneid.cummeRbund[,2], annotation="org.MeSH.Hsa.db", category="D", database="gendoo", pvalueCutoff=0.05, pAdjust="none")
> 
> meshR <- meshHyperGTest(meshParams)
> 
> 
> 
> cleanEx()
> nameEx("meshr-package")
> ### * meshr-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: meshr-package
> ### Title: Enrichment analysis for MeSH terms.
> ### Aliases: meshr-package meshr
> ### Keywords: package
> 
> ### ** Examples
> 
> ls("package:meshr")
 [1] "annotation"        "annotation<-"      "category"         
 [4] "category<-"        "database"          "database<-"       
 [7] "geneIds"           "initialize"        "makeValidParams"  
[10] "meshAnnotation"    "meshCategory"      "meshDatabase"     
[13] "meshHyperGTest"    "meshIds"           "pAdjust"          
[16] "pAdjust<-"         "pvalueCutoff"      "pvalueCutoff<-"   
[19] "save.pdf"          "show"              "summary"          
[22] "universeGeneIds"   "universeGeneIds<-"
> 
> 
> 
> cleanEx()
> nameEx("sig.geneid.cummeRbund")
> ### * sig.geneid.cummeRbund
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sig.geneid.cummeRbund
> ### Title: Test data of significant differentially expressed genes used in
> ###   cummeRbund package.
> ### Aliases: sig.geneid.cummeRbund
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(sig.geneid.cummeRbund)
> names(sig.geneid.cummeRbund)
[1] "SYMBOL"   "ENTREZID"
> 
> ## This data is also available by following scripts.
> if(interactive()){
+ library(cummeRbund)
+ library(org.Hs.eg.db)
+ cuff <- readCufflinks(dir = system.file("extdata", package = "cummeRbund"))
+ 
+ gene.symbols <- annotation(genes(cuff))[,4]
+ mySigGeneIds <- getSig(cuff,x='hESC',y='iPS',alpha=0.05,level='genes')
+ mySigGenes <- getGenes(cuff,mySigGeneIds)
+ 
+ sig.gene.symbols <- annotation(mySigGenes)[,4]
+ gene.symbols <- gene.symbols[!is.na(gene.symbols)]
+ sig.gene.symbols <- sig.gene.symbols[!is.na(sig.gene.symbols)]
+ 
+ geneid.cummeRbund <- select(org.Hs.eg.db, keys=gene.symbols, keytype="SYMBOL", columns="ENTREZID")
+ sig.geneid.cummeRbund <- select(org.Hs.eg.db, keys=sig.gene.symbols, keytype="SYMBOL", columns="ENTREZID")
+ 
+ na.index1 <- which(is.na(geneid.cummeRbund[,2]))
+ for (i in na.index1){
+ s <- unlist(strsplit(as.character(geneid.cummeRbund[i,][1]), ","))[1]
+ sym <- get(s, org.Hs.egALIAS2EG)[1]
+ geneid.cummeRbund[i,2] <- as.integer(sym)
+ }
+ 
+ na.index2 <- which(is.na(sig.geneid.cummeRbund[,2]))
+ for (i in na.index2){
+ 	s <- unlist(strsplit(as.character(sig.geneid.cummeRbund[i,][1]), ","))[1]
+ 	sym <- get(s, org.Hs.egALIAS2EG)[1]
+ 	sig.geneid.cummeRbund[i,2] <- as.integer(sym)
+ }
+ 
+ geneid.cummeRbund <- geneid.cummeRbund[!duplicated(geneid.cummeRbund[,2]), ]
+ sig.geneid.cummeRbund <- sig.geneid.cummeRbund[!duplicated(sig.geneid.cummeRbund[,2]), ]
+ }
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  267.461 5.562 276.657 0.003 0.004 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
